data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",hoursSlept),format='%H%M'),12,16)
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
#save the new table to a csv
write_csv(data5, "night2.csv")
#Plot data
library('ggplot2')
ggplot(data5) + geom_point(aes(hoursSlept, productivity))
#Bin the DateTime column into four bins
data5$bins <- cut(hoursSlept,3, labels = c("Bad Sleep <3","Decent Sleep 3-6","Normal Sleep 7+"))
data5
#Bin the DateTime column into four bins
data5 <- cut(hoursSlept,3, labels = c("Bad Sleep <3","Decent Sleep 3-6","Normal Sleep 7+"))
#Bin the DateTime column into four bins
data5$hoursSlept <- cut(hoursSlept,3, labels = c("Bad Sleep <3","Decent Sleep 3-6","Normal Sleep 7+"))
#Isolate DateTime column to edit
binning <- data5$hoursSlept
#Bin the DateTime column into four bins
data5$hoursSlept <- cut(binning,3, labels = c("Bad Sleep <3","Decent Sleep 3-6","Normal Sleep 7+"))
#Bin the DateTime column into four bins
data5$hoursSlept <- cut(binning,3, labels = c("Bad Sleep ","Decent Sleep ","Normal Sleep "))
#create a new column hours (so that I can bin)
data5 = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Bin the DateTime column into four bins
data5$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#Isolate DateTime column to edit
hoursbin <- data5$hours
#Bin the DateTime column into four bins
data5$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
ggplot(data5) + geom_point(aes(hours, productivity))
ggplot(data5) + geom_point(aes(hoursbin, productivity))
ggplot(data5) + geom_point(aes(bins, productivity))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "energy level"))
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
#create a new column hours (so that I can bin)
data5 = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Isolate DateTime column to edit
hoursbin <- data5$hours
#Bin the DateTime column into 3 bins
data5$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(bins, productivity))
#create a copy of data5
data6 = data5
#create a copy of data5
dataBin = data5
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
#create a new column hours (so that I can bin)
dataBin = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
View(dataBin)
#Isolate DateTime column to edit
hoursbin <- data5$hours
#Bin the DateTime column into 3 bins
data5$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "energy level"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "focus level"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "energy level"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "stress level"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "productivity "))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, focus level))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, focus))
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
#save the new table to a csv
write_csv(data5, "night2.csv")
#Plot data
library('ggplot2')
ggplot(data5) + geom_point(aes(hoursSlept, productivity))
#create a new column hours (so that I can bin)
dataBin = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(bins, productivity))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, focus))
#create a copy of data5
dataBin = data5
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
#save the new table to a csv
write_csv(data5, "night2.csv")
#Plot data
library('ggplot2')
ggplot(data5) + geom_point(aes(hoursSlept, productivity))
#create a new column hours (so that I can bin)
dataBin = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(bins, productivity))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, focus))
#create a copy of data5
#plot hoursslept with energy level
ggplot(dataBin) + geom_point(aes(bins, focus))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(hoursSlept, energy))
#plot hoursslept with energy level
ggplot(dataBin) + geom_point(aes(bins, energy))
#save new csv
write_csv(dataBin, "nightBin.csv")
#save new csv
write_csv(data2, "nightprocessed.csv")
#save new csv
write_csv(data2, "nightprocessed.csv")
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
#save the new table to a csv
write_csv(data5, "night2.csv")
#Plot data
library('ggplot2')
ggplot(data5) + geom_point(aes(hoursSlept, productivity))
#create a new column hours (so that I can bin)
dataBin = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(hoursSlept, energy))
#plot hoursslept with energy level
ggplot(dataBin) + geom_point(aes(bins, energy))
#save new csv
write_csv(data2, "nightprocessed.csv")
#save new csv
write_csv(data2, "nightprocessed.csv")
ttnic.pred <- predict(ttnic.lm2.step, type="Survived")
sourcedir <- "~/Documents/4021/R Code"
datadir <- "~/Documents/4021/Data/"
library(forecast)
library(tidyverse)
library(lubridate)
library(ggplot2)
setwd(datadir)
ttnic<-read.table('titanic.csv',header=T,sep=',')
#Q5
ttnic.lm2 <- lm(Survived~(Age+Fare+as.factor(Sex)+Pclass), data=ttnic)
#interaction
ttnic.lm2.int <- lm(Survived~(Age+Fare+Sex+Pclass)^2, data=ttnic)
#stepwise
ttnic.lm2.step <- step(ttnic.lm2)
ttnic.pred <- predict(ttnic.lm2.step, type="Survived")
ttnic.pred <- predict(ttnic.lm2.step, type="response")
source("pc.glm.R")
source("PCAplots.R")
source("ROC.R")
source("TestSet.R")
setwd(sourcedir)
source("pc.glm.R")
source("PCAplots.R")
source("ROC.R")
source("TestSet.R")
score.table(ttnic.pred, ttnic$Survived , .5)
plot.roc(ttnic.pred , ttnic$Survived, main = "ROC Curve - SPAM Filter", col = "blue")
lines.roc(ttnic.pred, ttnic$Survived , col="orange")
plot.roc(ttnic.pred , ttnic$Survived, main = "ROC Curve - SPAM Filter", col = "blue")
lines.roc(ttnic.pred, ttnic$Survived , col="orange")
plot.roc(ttnic.pred , ttnic$Survived, main = "ROC Curve - SPAM Filter", col = "blue")
#auto csv
auto <- read.table('auto.csv',header=T,sep=',')
#auto csv
setwd(datadir)
auto <- read.table('auto.csv',header=T,sep=',')
setwd(sourcedir)
boxplot?
?boxplot
boxplot(auto)
boxplot(auto$mpg)
View(auto)
max(auto$mpg)
View(auto$mpg==46.6)
setwd(sourcedir)
source("SPM_Panel.R")
uva.pairs(auto)
auto$car <- as.factor(auto$car)
View(auto)
View(auto)
View(auto)
auto$horsepower <- as.factor(auto$horsepower)
uva.pairs(auto)
mpg.main <- lm(mpg~(as.factor(cylinders) + weight + displacement), data=auto)
summary(mpg.main)
# Lets look at the default treatment coding
contrasts(Cause)
source("AccidentInput.R")
setwd(traindir)
contrasts(cylinders)
contrasts(auto$cylinders)
contrasts(as.factor(auto$cylinders))
# Create a qualitative variable for Cause
Cause <- rep(NA, nrow(xdmgnd))
setwd(traindir)
traindir <- "~/Documents/4021/Data/TrainData"
setwd(traindir)
acts <- file.inputl(traindir)
totacts <- combine.data(acts)
# Build a data frame xdmg with only extreme accidents for ACCDMG
dmgbox <-boxplot(totacts$ACCDMG)
xdmg <- totacts[totacts$ACCDMG > dmgbox$stats[5],]
# Remove duplicates from xdmg and call new data frame xdmgnd
xdmgnd <- xdmg[!(duplicated(xdmg[, c("INCDTNO", "YEAR", "MONTH", "DAY", "TIMEHR", "TIMEMIN")])),]
# Lets look at the default treatment coding
contrasts(Cause)
# Create a qualitative variable for Cause
Cause <- rep(NA, nrow(xdmgnd))
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "M")] <- "M"  ##Miscellaneous
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "T")] <- "T"  ##Track
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "S")] <- "S"  ##Signal or communication
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "H")] <- "H"  ##Human
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "E")] <- "E"  ##Electrical or mechanical
# This new variable, Cause, has to be a factor
Cause <- as.factor(Cause)
# Lets look at the default treatment coding
contrasts(Cause)
#Chage based case to H ----
contrasts(Cause)<-matrix(c(1,0,0,0,0, 0,0,1,0,0, 0,0,0,1,0,  0,0,0,0,1),nrow=5)
colnames(contrasts(Cause)) <-matrix(c("E","M","S","T"),ncol=4)
contrasts(Cause)
xdmgnd.lm6<-lm(ACCDMG~Cause,data=xdmgnd)
summary(xdmgnd.lm6)
# Create a qualitative variable for Cause
Cause <- rep(NA, nrow(xdmgnd))
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "M")] <- "M"  ##Miscellaneous
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "T")] <- "T"  ##Track
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "S")] <- "S"  ##Signal or communication
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "H")] <- "H"  ##Human
Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "E")] <- "E"  ##Electrical or mechanical
# This new variable, Cause, has to be a factor
Cause <- as.factor(Cause)
# Lets look at the default treatment coding
contrasts(Cause)
# Write a model to predict ACCDMG in terms of Cause
xdmgnd.lm5<-lm(ACCDMG~Cause,data=xdmgnd)
summary(xdmgnd.lm5)
contrasts(as.factor(auto$cylinders))
auto$cylinders <- as.factor(auto$cylinders)
contrasts(auto$cylinders)
contrasts(auto$cylinders)<-matrix(c(1,0,0,0,0, 0,0,1,0,0, 0,0,0,1,0,  0,0,0,0,1),nrow=5)
colnames(contrasts(auto$cylinders)) <-matrix(c("3","5","6","8"),ncol=4)
contrasts(auto$cylinders)
mpg.main <- lm(mpg~(cylinders + weight + displacement) , data=auto)
mpg.main.rec <- lm(mpg~(cylinders + weight + displacement) , data=auto)
summary(mpg.main.rec)
plot(mpg.main.rec)
plot(mpg.main.rec, which=2)
plot(mpg.main.rec, which=4)
#PART 3: Time series analysis
setwd(sourcedir)
gnp96 <- read.table("gnp96.dat")
#PART 3: Time series analysis
setwd(datadir)
gnp96 <- read.table("gnp96.dat")
gnp <- ts(gnp96[.2])
gnp <- ts(gnp96[,2])
##load the 'ham_ts.csv' and 'spam_ts.csv' into ham and spam variables repectively
setwd(datadir)
ham<-read.table('ham_ts.csv',header=T,sep=',')
datadir <- "~/Documents/4021/Data/Spam"
##load the 'ham_ts.csv' and 'spam_ts.csv' into ham and spam variables repectively
setwd(datadir)
ham<-read.table('ham_ts.csv',header=T,sep=',')
spam<-read.table('spam_ts.csv',header=T,sep=',')
setwd(sourcedir)
##summarize the new ham data set, what do you notice?  what are the variables, ranges?
summary(ham)
##summarize the new spam data set, what do you notice?  what are the variables, ranges?
summary(spam)
##use the ts() command to get a time series of ham amount using ham data from all years
ham.ts<-ts(ham$count)
##use the ts() command to get a time series of spam amount using spam data from all years
spam.ts<-ts(spam$count)
##load libraries (install them if necessary)
library(forecast)
library(tidyverse)
library(lubridate)
library(ggplot2)
##Plot the time series you created for ham, ham.ts.
plot(ham.ts)
#Create a new variable time.ham which is a matrix of (length(ham.ts))
time.ham<-c(1:length(ham.ts))
#Build a new model, ham.trend, which predicts ham.ts based on the time variable, time.ham
ham.trend<-lm(ham.ts~time.ham)
summary(ham.trend)
#Plot the trend line for ham.ts
ggplot(ham, aes(x=date,y=count)) + geom_line() +
stat_smooth(method="lm",col="red") + ylab("Ham Emails")
ham.day <- time.ham %% 7
ham.day <-as.factor(time.ham %% 7)
Day <- rep(NA, length(ham.ts))
#Build a model ham.trendseason to model the trend and seasonality of ham.
ham.trendseason<-lm(ham.ts~time.ham+Day)
#Is ham.trendseason significant?
summary(ham.trendseason)
##Load the Virginia weather data
setwd(datadir)
VAweather <- read.table('VirginiaWeatherData.csv',header=T,sep=',')
#Build a new model, spam.trend which predicts spam.ts based on the time variable, time.spam
spam.trend<-lm(spam.ts~time.spam)
#Use the acf() command on your created time series for ham.
acf(ham.ts)
ggAcf(ham.ts)
##Plot the time series you created for spam, spam.ts.
autoplot(spam.ts,ylab="Number of Spam Emails",xlab="Day")
date <- spam %>% select(year, month, day) %>% mutate(date = make_datetime(year,month,day))
spam$date <- date$date
ggplot(spam, aes(x=date,y=count)) + geom_line() + ylab("Spam Count") + xlab("")
#Use the acf() command on your created time series for spam.
ggAcf(spam.ts)
#Create a new variable time.spam which is a matrix of (length(spam.ts))
time.spam<-c(1:(length(spam.ts)))
#Build a new model, spam.trend which predicts spam.ts based on the time variable, time.spam
spam.trend<-lm(spam.ts~time.spam)
##use the summary() command on spam.trend. Is time significant in predicting spam frequency?
summary(spam.trend)
#Use the acf() command on your created time series for ham.
acf(ham.ts)
##Plot the time series you created for spam, spam.ts.
autoplot(spam.ts,ylab="Number of Spam Emails",xlab="Day")
date <- spam %>% select(year, month, day) %>% mutate(date = make_datetime(year,month,day))
spam$date <- date$date
ggplot(spam, aes(x=date,y=count)) + geom_line() + ylab("Spam Count") + xlab("")
#Create a new variable time.spam which is a matrix of (length(spam.ts))
time.spam<-c(1:(length(spam.ts)))
#Build a new model, spam.trend which predicts spam.ts based on the time variable, time.spam
spam.trend<-lm(spam.ts~time.spam)
##use the summary() command on spam.trend. Is time significant in predicting spam frequency?
summary(spam.trend)
#Plot the trend line for spam.ts
plot(spam.ts)
abline(spam.trend,col='red')
#Plot the trend line for spam.ts
plot(spam.ts)
abline(spam.trend,col='red')
plot(gnp)
#Build a model ham.trendseason to model the trend and seasonality of ham.
ham.trendseason<-lm(ham.ts~time.ham+Day)
#Is ham.trendseason significant?
summary(ham.trendseason)
time.gnp <- c(1:length(gnp))
gnp.trend <- lm(gnp~time.gnp)
summary(gnp.trend)
plot(log(gnp)
plot(log(gnp))
plot(log(gnp))
gnp.trend <- lm(log(gnp)~time.gnp)
summary(gnp.trend)
install.packages("mtsdi")
yes
pg.gnp <- spec.pgram(gnp , spans = 9 , demean = T,log='yes')
pg.gnp <- spec.pgram(log(gnp) , spans = 9 , demean = T,log='yes')
pg.gnp <- spec.pgram(log(gnp) , spans = 9 , demean = T)
gnp.spec <- data.frame(freq=pg.gnp$freq , spec = pg.gnp$spec)
ggplot(gnp.spec) + geom_line(aes(x=freq,y=spec)) +
ggtitle("Smooth Periodogram of GNP")
acf(log(gnp))
sourcedir <- "~/Documents/4021/R Code"
datadir <- "~/Documents/4021/Data/Spam"
library(forecast)
setwd(datadir)
ttnic<-read.table('titanic.csv',header=T,sep=',')
setwd(sourcedir)
#Q1 : How many people survived? A:342
sum(ttnic$Survived == 1)
ttnic$Survived <- as.factor(ttnic$Survived)
source("SPM_Panel.R")
uva.pairs(ttnic)
ttnic$Pclass <- as.factor(ttnic$Pclass)
ttnic$Survived <- as.factor(ttnic$Survived)
ttnic$Pclass <- as.factor(ttnic$Pclass)
ttnic$Sex <- as.factor(ttnic$Sex)
ttnic$Cabin <- as.factor(ttnic$Cabin)
ttnic$Embarked <- as.factor(ttnic$Embarked)
ttnic$title <- as.factor(ttnic$title)
uva.pairs(ttnic)
#Q5
ttnic.lm2 <- lm(Survived~(Age+Fare+Sex+Pclass), data=ttnic)
summary(ttnic.lm2)
ttnic.lm <- lm(Survived~(Pclass + Sex + Fare + as.factor(Cabin)) , data=ttnic)
summary(ttnic.lm)
setwd(datadir)
ttnic<-read.table('titanic.csv',header=T,sep=',')
setwd(sourcedir)
#Q1 : How many people survived? A:342
sum(ttnic$Survived == 1)
ttnic.lm <- lm(Survived~(Pclass + Sex + Fare + as.factor(Cabin)) , data=ttnic)
setwd(datadir)
ttnic<-read.table('titanic.csv',header=T,sep=',')
