data5 = mutate(data4, hoursSlept = woke-asleep)
data5 = mutate(data4, hoursSlept = as.numeric(woke-asleep))
data4$woke
data4$woke - data4$asleep
data4$asleep
as.numeric(data4$asleep)
as.numeric(data4$asleep) - as.numeric(data$woke)
as.numeric(data$woke) - as.numeric(data4$asleep)
as.numeric(data4$woke) - as.numeric(data4$asleep)
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
data5
View(data5)
data5 = round(hoursSlept,-100)
data5 = round(data4$hoursSlept,-100)
data5$hoursSlept <- substr(as.POSIXct(sorintf("%04.0f",data5),format='%H%M'),12,16)
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5),format='%H%M'),12,16)
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",hoursSlept),format='%H%M'),12,16)
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
#save the new table to a csv
write_csv(data5, "night2.csv")
#Plot data
library('ggplot2')
ggplot(data5) + geom_point(aes(hoursSlept, productivity))
#Bin the DateTime column into four bins
data5$bins <- cut(hoursSlept,3, labels = c("Bad Sleep <3","Decent Sleep 3-6","Normal Sleep 7+"))
data5
#Bin the DateTime column into four bins
data5 <- cut(hoursSlept,3, labels = c("Bad Sleep <3","Decent Sleep 3-6","Normal Sleep 7+"))
#Bin the DateTime column into four bins
data5$hoursSlept <- cut(hoursSlept,3, labels = c("Bad Sleep <3","Decent Sleep 3-6","Normal Sleep 7+"))
#Isolate DateTime column to edit
binning <- data5$hoursSlept
#Bin the DateTime column into four bins
data5$hoursSlept <- cut(binning,3, labels = c("Bad Sleep <3","Decent Sleep 3-6","Normal Sleep 7+"))
#Bin the DateTime column into four bins
data5$hoursSlept <- cut(binning,3, labels = c("Bad Sleep ","Decent Sleep ","Normal Sleep "))
#create a new column hours (so that I can bin)
data5 = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Bin the DateTime column into four bins
data5$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#Isolate DateTime column to edit
hoursbin <- data5$hours
#Bin the DateTime column into four bins
data5$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
ggplot(data5) + geom_point(aes(hours, productivity))
ggplot(data5) + geom_point(aes(hoursbin, productivity))
ggplot(data5) + geom_point(aes(bins, productivity))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "energy level"))
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
#create a new column hours (so that I can bin)
data5 = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Isolate DateTime column to edit
hoursbin <- data5$hours
#Bin the DateTime column into 3 bins
data5$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(bins, productivity))
#create a copy of data5
data6 = data5
#create a copy of data5
dataBin = data5
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
#create a new column hours (so that I can bin)
dataBin = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
View(dataBin)
#Isolate DateTime column to edit
hoursbin <- data5$hours
#Bin the DateTime column into 3 bins
data5$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "energy level"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "focus level"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "energy level"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "stress level"))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, "productivity "))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, focus level))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, focus))
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
#save the new table to a csv
write_csv(data5, "night2.csv")
#Plot data
library('ggplot2')
ggplot(data5) + geom_point(aes(hoursSlept, productivity))
#create a new column hours (so that I can bin)
dataBin = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(bins, productivity))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, focus))
#create a copy of data5
dataBin = data5
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
#save the new table to a csv
write_csv(data5, "night2.csv")
#Plot data
library('ggplot2')
ggplot(data5) + geom_point(aes(hoursSlept, productivity))
#create a new column hours (so that I can bin)
dataBin = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(bins, productivity))
#plot hoursslept with energy level
ggplot(data5) + geom_point(aes(hoursSlept, focus))
#create a copy of data5
#plot hoursslept with energy level
ggplot(dataBin) + geom_point(aes(bins, focus))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(hoursSlept, energy))
#plot hoursslept with energy level
ggplot(dataBin) + geom_point(aes(bins, energy))
#save new csv
write_csv(dataBin, "nightBin.csv")
#save new csv
write_csv(data2, "nightprocessed.csv")
#save new csv
write_csv(data2, "nightprocessed.csv")
library(tidyverse)
library(readr)
data = read_csv("Desktop/Night.csv")
#Subsetting only rows with data points
data2 = data[c(1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58),]
data2
#Subsetting a row with N/A data point
data3 = data2[-c(6),]
data3
#Convert data to data frame for analysis
data4 = as.data.frame(data3)
data4
#create a new column hoursSLept
data5 = mutate(data4, hoursSlept = as.numeric(data4$woke) - as.numeric(data4$asleep))
#changing time format of hoursSlept from 0910 to 09:10
data5$hoursSlept <- substr(as.POSIXct(sprintf("%04.0f",data5$hoursSlept),format='%H%M'),12,16)
data5
#save the new table to a csv
write_csv(data5, "night2.csv")
#Plot data
library('ggplot2')
ggplot(data5) + geom_point(aes(hoursSlept, productivity))
#create a new column hours (so that I can bin)
dataBin = mutate(data4, hours = as.numeric(data4$woke) - as.numeric(data4$asleep))
#Isolate DateTime column to edit
hoursbin <- dataBin$hours
#Bin the DateTime column into 3 bins
dataBin$bins <- cut(hoursbin,3, labels = c("Bad Sleep","Decent Sleep","Good Sleep"))
#plot productivity with new bin
ggplot(data5) + geom_point(aes(hoursSlept, energy))
#plot hoursslept with energy level
ggplot(dataBin) + geom_point(aes(bins, energy))
#save new csv
write_csv(data2, "nightprocessed.csv")
#save new csv
write_csv(data2, "nightprocessed.csv")
sourcedir <- "~/Documents/4021/R Code"
datadir <- "~/Documents/4021/Data/"
library(forecast)
library(tidyverse)
library(lubridate)
library(ggplot2)
setwd(datadir)
app <-read.table('app.csv',header=T,sep=',')
setwd(sourcedir)
boxplot(app$Price)
source("SPM_Panel.R")
uva.pairs(app)
app.int <- lm(Price~(Users + Platform)^2 , data = app)
summary(app.int)
AIC(app.int)
step(app.int)
AIC?
step(app.int)
app.main <- lm(Price ~. , data=app)
summary(app.main)
AIC(app.main)
plot(app.main)
plot(app.main,which = 4)
boxcox(app.main)
ggboxcox(app.main)
##Check distribution of ACCDMG of test set, training set:
library(ggplot2)
library(ggpubr)
ggboxcox(app.main)
gg_boxcox(app.main)
library(ggfortify)
gg_boxcox(app.main)
library(boot)
library(MASS)
library(lindia)
gg_boxcox(app.main)
boxcox(app.main)
View(app)
app.pca <- princomp(app)
app.pca <- princomp(app[,c("Develop" ,"X5Star" , "CompSites" , "Date" , "Users", "Prices")])
app.pca <- princomp(app[,c("Develop" ,"X5Star" , "CompSites" , "Date" , "Users", "Price")])
barplot(app.pca$loadings[,1], main='PC1 Loadings')
biplot(app.pca)
app.pca <- princomp(app[,c("Develop" ,"X5Star" , "CompSites" , "Date" , "Users", "Price" , "Platform")])
app.pca <- princomp(app[,c("Develop" ,"X5Star" , "CompSites" , "Date" , "Users", "Price" ,"Advert")])
biplot(app.pca)
barplot(app.pca$loadings[,1], main='PC1 Loadings')
app.pca <- princomp(app[,c("Develop" ,"X5Star" , "CompSites" , "Date" , "Users", "Price" )])
biplot(app.pca)
barplot(app.pca$loadings[,1], main='PC1 Loadings')
#Q23
cas.pca<-princomp(casualty_dfne[,c("CARS","TIMEHR","TEMP","casualty","TRNSPD")], cor = T)
app.pca <- princomp(app[,c("Develop" ,"X5Star" , "CompSites" , "Date" , "Users", "Price" )],cor = T)
barplot(app.pca$loadings[,1], main='PC1 Loadings')
#PART 2
heart <- read.csv("heart.csv", sep=",", header=T)
#PART 2
setwd(datadir)
heart <- read.csv("heart.csv", sep=",", header=T)
setwd(sourcedir)
setwd(sourcedir)
source("pc.glm.R")
source("PCAplots.R")
source("ROC.R")
source("TestSet.R")
View(sqf_2016)
heart.glm.null <- glm(log(diag)~1, data=heart, family=binomial)
View(heart)
heart$diag <- log(heart$diag + .1)
View(heart)
heart.glm.null <- glm(diag~1, data=heart, family=binomial)
heart <- read.csv("heart.csv", sep=",", header=T)
View(heart)
#PART 2
setwd(datadir)
heart <- read.csv("heart.csv", sep=",", header=T)
setwd(sourcedir)
View(heart)
heart.glm.null <- glm(diag~1, data=heart, family=binomial)
summary(heart.glm.null)
heart.glm.main <- glm(diag~(age + as.factor(cp) + as.factor(sex)))
heart.glm.main <- glm(diag~(age + as.factor(cp) + as.factor(sex)) , data=heart, family=binomial)
summary(heart.glm.main)
anova(heart.glm.null,heart.glm.main,test = "chi")
anova(heart.glm.null,heart.glm.main,test = "Chi")
heart.glm2 <- glm(diag~(age + as.factor(cp) + as.factor(sex)) + restbps + chol + fbs, data=heart, family=binomial)
anova(heart.glm.main , heart.glm2 , test="Chi")
heart.glm2 <- glm(diag~(age + as.factor(cp) + as.factor(sex)) + restbps + chol + fbs + as.factor(restecg), data=heart, family=binomial)
heart.glm2 <- glm(diag~(age + as.factor(cp) + as.factor(sex)) + restbps + chol + fbs, data=heart, family=binomial)
heart.glm3 <- glm(diag~(age + as.factor(cp) + as.factor(sex)) + restbps + chol + fbs + as.factor(restecg), data=heart, family=binomial)
step(heart.glm3)
heart.glm.age <- glm(diag~age , data=heart, family = binomial)
anova(heart.glm.age,heart.glm.step)
heart.glm.step <- step(heart.glm3)
heart.glm.age <- glm(diag~age , data=heart, family = binomial)
anova(heart.glm.age,heart.glm.step)
heart.glm.step <- step(heart.glm3)
summary(heart.glm.step)
summary(heart.glm3)
anova(heart.glm.age,heart.glm.step)
anova(heart.glm.age,heart.glm.step , test = "Chi")
setwd(datadir)
ttnic<-read.table('titanic.csv',header=T,sep=',')
setwd(sourcedir)
#Q8 : total errors: (false positive + false negative) 107 + 82 = 189
ttnic.pred <- predict(ttnic.lm2.step, type="response")
#stepwise
ttnic.lm2.step <- step(ttnic.lm2)
#Q5
ttnic.lm2 <- lm(Survived~(Age+Fare+as.factor(Sex)+as.factor(Pclass)), data=ttnic)
#stepwise
ttnic.lm2.step <- step(ttnic.lm2)
#Q8 : total errors: (false positive + false negative) 107 + 82 = 189
ttnic.pred <- predict(ttnic.lm2.step, type="response")
score.table(ttnic.pred, ttnic$Survived , .5)
heart.pred <- predict(heart.glm.step , type = "response")
score.table(heart.pred , heart$diag , 0.5)
plot.roc(heart.pred , heart$diag , main = "ROC Curve - SPAM Filter", col = "blue")
View(heart)
View(heart)
heart.pca <- princomp(heart[,("age","restbps","chol")])
heart.pca <- princomp(heart[,c("age" , "restbps" , "chol")])
barplot(heart.pca$loadings[,1], main='PC1 Loadings')
screeplot(heart.pca)
cumplot(heart.pca)
heartpca.glm75 <- pc.glm(heart.pca, 75 , heart$diag)
heartpca.null <- pc.null(heart.pca , 75, heart$diag)
anova(heartpca.null, heartpca.glm75 , test="Chi")
AIC(heartpca.glm75)
aic(heart.glm.step)
AIC(heart.glm.step)
heart.pred2 <- predict(heartpca.glm75 , type = "response")
score.table(heart.pred2 , heart$diag , 0.5)
setwd(datadir)
sunspot <- read.table("sunspot.csv", sep = ",", header = T)
setwd(sourcedir)
pg.sun <- spec.pgram(sunspot , demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec)) + ggtitle("Smooth Periodogram of GNP")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec)) + ggtitle("Smooth Periodogram of GNP")
#q18 periodogram
pg.gnp <- spec.pgram(log(gnp) , spans = 9 , demean = T,log='yes')
##load libraries (install them if necessary)
library(forecast)
library(tidyverse)
library(lubridate)
library(ggplot2)
pg.sun <- spec.pgram(sunspot , demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
library(mtsdi)
library(forecast)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(ggfortify)
library(ggpubr)
library(tseries)
pg.sun <- spec.pgram(sunspot , demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
View(pg.sun)
setwd(datadir)
sunspot <- read.table("sunspot.csv", sep = ",", header = T)
setwd(sourcedir)
pg.sun <- spec.pgram(sunspot , demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
View(sunspot)
View(sun.spec)
pg.sun <- spec.pgram(sunspot , spans=12 , demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
#PART 3: Time series analysis
setwd(datadir)
gnp96 <- read.table("gnp96.dat")
gnp <- ts(gnp96[,2])
time.gnp <- c(1:length(gnp))
gnp.trend <- lm(log(gnp)~time.gnp)
#q18 periodogram
pg.gnp <- spec.pgram(log(gnp) , spans = 9 , demean = T,log='yes')
gnp.spec <- data.frame(freq=pg.gnp$freq , spec = pg.gnp$spec)
ggplot(gnp.spec) + geom_line(aes(x=freq,y=spec)) +
ggtitle("Smooth Periodogram of GNP")
gnp.spec <- data.frame(freq=pg.gnp$freq , spec = pg.gnp$spec)
gnp96 <- read.table("gnp96.dat")
gnp <- ts(gnp96[,2])
View(gnp96)
sun <- ts(sunspot[,2])
pg.sun <- spec.pgram(sun  , demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
View(sunspot)
pg.sun <- spec.pgram(sun, spans=12, demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
pg.sun <- spec.pgram(sun, spans=12, demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
#q18 periodogram
pg.gnp <- spec.pgram(log(gnp) , spans = 9 , demean = T,log='yes')
gnp.spec <- data.frame(freq=pg.gnp$freq , spec = pg.gnp$spec)
ggplot(gnp.spec) + geom_line(aes(x=freq,y=spec)) +
ggtitle("Smooth Periodogram of GNP")
pg.sun <- spec.pgram(sun, spans=12, demean = T , log="no")
sun.spec <- data.frame(freq=pg.sun$freq , spec=pg.sun$spec)
ggplot(sun.spec) + geom_line(aes(x=freq,y=spec))
time.sun <- c(1:length(sun))
sun.trend <- lm(sun~time.sun)
summary(sun.trend)
sun.trend <- lm(sun~time.sun ++ sin(2*pi*t/12) + cos(2*pi*t/12))
##Load libraries (install if necessary)
library(forecast)
library(ggplot2)
library(mtsdi)
library(tidyverse)
library(lubridate)
library(ggfortify)
library(ggpubr)
library(tseries)
sun.trend <- lm(sun~time.sun ++ sin(2*pi*t/12) + cos(2*pi*t/12))
sun.trend <- lm(sun~time.sun ++ sin(2* 3.1415* time.sun * /12) + cos(2*3.1415*time.sun/12))
sun.trend <- lm(sun~time.sun ++ sin(2* 3.1415* time.sun * /12) + cos(2*3.1415*time.sun/12))
sun.trend <- lm(sun~time.sun ++ sin(2* 3.1415* time.sun * /12) + cos(2*3.1415*time.sun/12))
sun.trend <- lm(sun~time.sun ++ sin(2* 3.1415* time.sun * /12) + cos(2*3.1415*time.sun/12))
sun.trend <- lm(sun~time.sun + sin(2* 3.1415* time.sun * /12) + cos(2*3.1415*time.sun/12))
sun.trend <- lm(sun~time.sun + sin(2* 3.1415* time.sun  /12) + cos(2*3.1415*time.sun/12))
summary(sun.trend)
acf(sun.trend)
acf(sun)
ggacf(sun.trend)
ggAcf(sun.trend)
sun.ts.temp <- ts(sun.trend$residuals)
sun.acf <- ggAcf(sun.ts.temp)
ggarrange(sun.acf,nrow=1,ncol=1)
sun.pacf <- ggPacf(sun.ts.temp)
ggarrange(sun.acf , sun.pacf,nrow=1,ncol=1)
ggarrange(sun.acf , sun.pacf,nrow=2,ncol=1)
sun.auto <- auto.arima(sun, approximation = FALSE)
summary(sun.auto)
tsdiag(sun.auto,lag=20)
tsdiag(sun.auto,lag=30)
tsdiag(sun.auto,lag=30)
